const express = require('express');
const bodyParser = require('body-parser');
const app = express();
app.use(bodyParser.json());

const SEAT_COUNT = 10;
let seats = Array.from({ length: SEAT_COUNT }, (_, i) => ({
  id: i + 1,
  status: 'available', // 'available', 'locked', 'booked'
  lockedBy: null,
  lockTimer: null
}));

app.get('/seats', (req, res) => {
  res.json(seats.map(s => ({ id: s.id, status: s.status, lockedBy: s.lockedBy })));
});

app.post('/lock', (req, res) => {
  const { seatId, user } = req.body;
  if (!seatId || !user) return res.status(400).json({ error: 'seatId and user required' });
  const seat = seats.find(s => s.id === seatId);
  if (!seat) return res.status(404).json({ error: 'Seat not found' });
  if (seat.status === 'booked') return res.status(400).json({ error: 'Seat already booked' });
  if (seat.status === 'locked') return res.status(400).json({ error: `Seat locked by ${seat.lockedBy}` });

  seat.status = 'locked';
  seat.lockedBy = user;
  seat.lockTimer = setTimeout(() => {
    seat.status = 'available';
    seat.lockedBy = null;
    seat.lockTimer = null;
  }, 60000);

  res.json({ message: `Seat ${seatId} locked by ${user} for 1 minute` });
});

app.post('/confirm', (req, res) => {
  const { seatId, user } = req.body;
  if (!seatId || !user) return res.status(400).json({ error: 'seatId and user required' });
  const seat = seats.find(s => s.id === seatId);
  if (!seat) return res.status(404).json({ error: 'Seat not found' });
  if (seat.status !== 'locked' || seat.lockedBy !== user)
    return res.status(400).json({ error: 'Seat not locked by you or already booked' });

  clearTimeout(seat.lockTimer);
  seat.status = 'booked';
  seat.lockedBy = null;
  seat.lockTimer = null;

  res.json({ message: `Seat ${seatId} successfully booked by ${user}` });
});

app.listen(4000, () => console.log('Ticket Booking API running on port 4000'));

